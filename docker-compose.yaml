version: '3.7'

services:
  prometheus:
    image: prom/prometheus:v2.28.1
    volumes:
      - ./config/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - benchmark

  jaeger:
    image: jaegertracing/all-in-one:1.49
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "4317:4317"
      - "4318:4318"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    networks:
      - benchmark

  grafana:
    image: grafana/grafana:10.2.0
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - ./config/grafana/:/etc/grafana/provisioning/datasources
      - ./config/grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./config/grafana/dashboards:/etc/grafana/dashboards
    depends_on:
      - prometheus
      - jaeger
    networks:
      - benchmark

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.86.0
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./config/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4320:4317"
    depends_on:
      - jaeger
      - prometheus
    networks:
      - benchmark

  storytellers-api:
    container_name: storytellers-api
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      AWS_DEFAULT_REGION: us-east-1
      #AWS_S3_ENDPOINT_URL: ${AWS_S3_ENDPOINT_URL}
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME:-}
      OTEL_SERVICE_NAME: storytellers-api
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: none
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317/
    ports:
      - "8000:8000"
    command: ["gunicorn", "-k", "uvicorn.workers.UvicornWorker", "benchmark.main:app", "-b", "0.0.0.0:8000", "--reload"]
    volumes:
      - ./benchmark:/app/benchmark:rw
      - ./logs:/app/logs:rw
      
    networks:
      - benchmark

networks:
  benchmark:
    driver: bridge
