version: '3.7'

services:

  minio:
    image: minio/minio
    expose:
      - "9000"
    ports:
      - "9000:9000"
      - "9001:9001" # MinIO Console is available at http://localhost:9001
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    networks:
      - benchmark
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:9000/minio/health/live"
        ]
      interval: 1s
      timeout: 10s
      retries: 5
    # Note there is no bucket by default
    command: server /data --console-address ":9001"
    volumes:
      - ./docker/minio/data/:/data

  minio-create-bucket:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      bash -c " mc alias set minio http://minio:9000 ${MINIO_USER} ${MINIO_PASSWORD} && if ! mc ls minio | grep --quiet benchmark; then
          mc mb minio/benchmark
      else
          echo 'bucket already exists'
      fi "
    networks:
      - benchmark

  prometheus:
    image: prom/prometheus:v2.28.1
    volumes:
      - ./config/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - benchmark

  jaeger:
    image: jaegertracing/all-in-one:1.49
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "4317:4317"
      - "4318:4318"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    networks:
      - benchmark

  grafana:
    image: grafana/grafana:10.2.0
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - ./config/grafana/:/etc/grafana/provisioning/datasources
      - ./config/grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./config/grafana/dashboards:/etc/grafana/dashboards
    depends_on:
      - prometheus
      - jaeger
    networks:
      - benchmark

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.85.0
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./config/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4320:4317"
    depends_on:
      - jaeger
      - prometheus
    networks:
      - benchmark

  sync_api:
    container_name: fastapi-service-sync
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      AWS_ACCESS_KEY_ID: ${MINIO_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_PASSWORD}
      AWS_DEFAULT_REGION: us-east-1
      AWS_S3_ENDPOINT_URL: http://minio:9000/
      AWS_S3_BUCKET_NAME: benchmark
      OTEL_SERVICE_NAME: fastapi-service-sync
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: none
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317/
    ports:
      - "8000:8000"
    command: ["gunicorn", "-k", "uvicorn.workers.UvicornWorker", "benchmark.main:app", "-b", "0.0.0.0:8000", "--reload"]
    volumes:
      - ./benchmark:/app/benchmark:rw
      - ./logs:/app/logs:rw
    networks:
      - benchmark

networks:
  benchmark:
    driver: bridge
